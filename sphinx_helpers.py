import os
import utils


def run_sphinx(toplevel_dir):
    """
    Currently assumes the following directory setup:
       $(toplevel_dir)/sphinx/conf.py      # probably autogenerated by make_sphinx_conf.py
       $(toplevel_dir)/sphinx/index.rst
       $(toplevel_dir)/docs                # initially empty, will be populated by run_sphinx()
    """

    for f in [ 'sphinx/conf.py', 'sphinx/index.rst', 'docs' ]:
        filename = os.path.join(toplevel_dir, f)

        if not os.path.exists(filename):
            raise RuntimeError("run_sphinx: file '%s' does not exist as expected" % filename)

    # The -E flag forces 'sphinx-build' to reread all its input files, even if nothing
    # appears to have changed.  This is necessary because 'sphinx-build' has no way of
    # knowing if docstrings have been changed since last time.
    
    input_dir = os.path.join(toplevel_dir, 'sphinx')
    output_dir = os.path.join(toplevel_dir, 'docs')
    utils.system("sphinx-build -E -b html %s %s" % (input_dir, output_dir))

    # The only thing I don't like about the RTD Sphinx theme is that it doesn't put any
    # spacing between bullet points in unordered lists.  I got carried away and wrote
    # this code to hack the Sphinx-generated CSS!

    filename = os.path.join(toplevel_dir, 'docs/_static/css/theme.css')

    with open(filename, 'a') as f:
        maxdepth = 9
        print >>f, "ul li { margin: 10px 0; }"
        for d in xrange(1, maxdepth+1):
            print >>f, "li.toctree-l%d { margin: 0 0; }" % d

    print
    print 'A local copy of the documentation has been built successfully!'
    print 'To view it, point your web browser here:'
    print
    print '    file://%s' % os.path.join(toplevel_dir, 'docs/index.html')

    # Traverse 'docs' directory looking for missing .nojekyll files.
    # My understanding is that every directory which contains subdirectories must contain .nojekyll,
    # except for subdirectories of docs/.doctrees and docs/.buildinfo.

    nojekyll_missing_dirs = set()

    def check_nojekyll(opaque_arg, dirname, fnames):
        parent = os.path.dirname(dirname)

        if parent == toplevel_dir:
            return
        if parent.startswith(os.path.join(toplevel_dir, 'docs/.doctrees')):
            return
        if parent.startswith(os.path.join(toplevel_dir, 'docs/.buildinfo')):
            return
        if parent in nojekyll_missing_dirs:
            return
        if os.path.exists(os.path.join(parent, '.nojekyll')):
            return

        # Missing .nojekyll file detected!  I decided to just print a warning, instead of creating
        # the .nojekyll file, because I got nervous about accidental rampage scenarios, for example
        # if a symlink somehow got created from docs/ to the user's home directory.

        print "*** WARNING: directory '%s' does not contain the .nojekyll file (required by Github Pages)" % parent
        nojekyll_missing_dirs.add(parent)
    
    d = os.path.join(toplevel_dir, 'docs')
    os.path.walk(d, check_nojekyll, None)

    if len(nojekyll_missing_dirs) > 0:
        print "*** You will probably want to create these .nojekyll files with 'touch'."""
